@startuml
'https://plantuml.com/class-diagram
title CD
hide circle
skinparam linetype ortho
skinparam package {
    BackgroundColor LightYellow
}
'top to bottom direction
left to right direction
skinparam ClassAttributeIconSize 0
interface "<<interface>>\nComparable " as Comparable{
    + compareTo(Object o) : int
    }



together {
package startup {
    class Main{
        + <<static>> main(args : String[]) : void
    }
}
    package view {
        class View {
            - contr: Controller
            + <<create>> View(contr : Controller) : View
        }
        class EndOfSaleView {}
        class RunningSaleView {}
        abstract class SaleView {}
        abstract class TotalRevenue {}
        class TotalRevenueView {}
    }
    package controller {
        class Controller{
            - saleObserver : List<SaleObserver>
            - printer : Printer
            - saleLog : SaleLog
            - itemRegistry : ItemRegistry
            - customerRegister : CustomerRegister
            - accountingSystem : AccountingSystem
            - cashRegister : CashRegister
            - currentSale : Sale
            - logger : ErrorFileLogHandler
            + <<create>> Controller(printer : Printer, registerCreator:RegisterCreator) : Controller
            + addSaleObserver(observer : SaleObserver) : void
            + addCashRegisterObserver(observer : CashRegisterObserver) : void
            + startSale() : void {exception OperationFailedException}
            + registerItem(itemID : int) : void {exceptions=(ItemNotFoundInItemRegistryException, OperationFailedException, IllegalStateException)}
            + registerItem(itemID : int, quantity : int) : void {exceptions=(ItemNotFoundInItemRegistryException, OperationFailedException, IllegalStateException)}
            + endSale() : void {exception IllegalStateException}
            + registerCustomerToSale(customerID : int) void {exceptions  IllegalStateException}
            + pay(paidAmt : Amount) : void {exception IllegalStateException}
        }
    }
    package model {
        class Sale{
            - saleObserver : List<SaleObserver>
            - timeOfSale : LocalDateTime
            - shoppingCart : HashMap<Integer, ShoppingCartItem>
            - payment : CashPayment
            - pricing : DiscountStrategy
            - customer : Customer
            - isComplete : boolean
            + <<create>> Sale() : Sale {exception OperationFailedException}
            + addItem(itemID : int, quantity : int) : void {exception ItemNotFoundInShoppingCartException}
            + addItem(itemInfo : ItemDTO, quantity : int) : void
            + calculateTotalPrice() : Amount
            - calculateRunningTotal() : Amount
            + getTotalVATCosts() : Amount
            - calculateTotalVATAmount() : Amount
            + isComplete() : boolean
            ~ getPayment() : CashPayment
            + getTotalPricePaid() : Amount
            ~ getCollectionOfItems() : Collection<Item>
            + endSale() : void
            + addCustomerToSale(customerInfo : CustomerDTO) : void
            + getCustomer() : Customer
            + getDiscount() : Amount
            + createStringDiscountInfo() : String
            + pay(payment : CashPayment) : void
            + printReceipt(printer : Printer) : void
            + addSaleObservers(eventType : observers : Map<Event, List<SaleObserver>>) : void
            - notifyObservers(eventType : Event) : void
        }
        class ShoppingCartItem{
            - itemInfo : ItemDTO
            - timeOfUpdate : LocalDateTime
            - quantity : int
            + <<create>> ShoppingCartItem(itemInfo:ItemDTO) : ShoppingCartItem
            + <<create>> ShoppingCartItem(itemInfo:ItemDTO, quantity : int): ShoppingCartItem
            + addToQuantity(additionalQuantity : int) : void
            + getTotalSubPrice() : Amount
            + calculateTotalSubVATCosts() : Amount
            - calculateUnitVATCost() : Amount
            + getTimeOfUpdate() : LocalDateTime
            + getItemDTO() : ItemDTO
            + getItemID() : int
            + getQuantity() : int
            + getUnitPriceIncVAT() : Amount
            + getName() : String
            + equals(o Object) : boolean
            }
        class CashPayment{
            - paidAmt : Amount
            - totalCostPaid : Amount
            + <<create>> CashPayment(paidAmt:Amount): CashPayment
            ~ calculateTotalCost(paidSale:Sale) : void
'            ~ calculateTotalCost(totalPrice : Amount, customer : Customer) : void
            ~ getPaidAmt() : Amount
            ~ getTotalCostPaid() : Amount
            ~ getChange() : Amount
            }
        class CashRegister{
            + <<static>> INITIAL_AMOUNT : double
            - cashRegisterObservers : List<CashRegisterObserver>
            - balance : Amount
            - revenue : Amount
            + <<create>> CashRegister(initialAmount : Amount) : CashRegister
            + <<create>> CashRegister(initialAmount : double) : CashRegister
            + <<create>> CashRegister() : CashRegister
            + addPayment(payment : CashPayment) : void
            + getBalance() : Amount
            + getRevenue() : Amount
            + addCashRegisterObserver(observer : CashRegisterObserver) : void
            + addCashRegisterObserver(observer : CashRegisterObserver) : void
            - notifyObservers() : void
        }
        class Receipt{
            - sale : Sale
            - timeOfSale : LocalDateTime
            - listOfShoppingCartItems : List<ShoppingCartItem>
            - locale : Locale
            - formatter : DateTimeFormatter
            - totalPricePreDiscount : Amount
            - totalPricePaid : Amount
            ~ <<create>> Receipt(sale: Sale) : Receipt
            - sortShoppingCart(listOfShoppingCartItems : List<ShoppingCartItem>) : void
            - createStringDiscountInfo() : String
            - createStringDiscountInfo() : String
            + toString() : String
        }

        class Amount{
            - currency : Currency
            - locale : Locale
            - amount : double
            + <<create>> Amount(amount : double, locale:Locale) : Amount
            + <<create>> Amount(amount : double) : Amount
            + <<create>> Amount(another : Amount) : Amount
            + <<create>> Amount() : Amount
            + minus(other : Amount) : Amount
            + plus(other : Amount) : Amount
            + plus(amounts : List<Amount>) : Amount
            + multiply(multiplier : double) : Amount
            + getAmount() : Double
            + toString() : String
            + equals(o : Object) : boolean
            + compareTo(o : Object) : int
        }
        class VAT{
            - vatRateGroupCode : int
            - vatRate : double
            + <<create>> VAT(vatRateGroupCode : int) : VAT
            + <<create>> VAT() : VAT
            + getVATRateGroupCode() : Int
            + getVATRate() : double
            + equals(Object o)
        }
        class Customer {
            - customerID : int
            - customerType : CustomerType
            - bonusPoints : int
            + <<create>> Customer(customerID : int, customerType : CustomerType, bonusPoints : int) : Customer
            + <<create>> Customer(customerInfo : CustomerDTO)) : Customer
            + getBonusPoints() : int
            + addBonusPoints(paidAmount : Amount)
            + decreaseBonusPoints(usedBonusPoints : int) : void
            + equals(Object o)
        }
        interface SaleObserver <<interface>> {
            + updateSale(sale : LimitedSaleView)
        }
        interface "<<interface>>\nCashRegisterObserver" as CashRegisterObserver {
            + updateRevenue(totalRevenue : Amount) : void
        }
        interface "<<interface>>\n: LimitedSaleView" as LimitedSaleView {
            + isComplete() : boolean
            + getTotalPricePaid() : Amount
            + getTotalPrice() : Amount
            + calculateRunningTotal() : Amount
            + getTotalVATCosts() : Amount
            + getCollectionOfItems() : Collection<ShoppingCartItem>
            + getDiscount() : Amount
            + createStringDiscountInfo() : String
        }
        class LimitedSaleViewWrapper {
            - sale : Sale
            + <<create>> LimitedSaleViewWrapper(sale : Sale) : LimitedSaleViewWrapper

        }
    }
}
    package integration {
        class RegisterCreator{
            - saleLog : SaleLog
            - itemRegistry:ItemRegistry
            - discountRegister : DiscountRegister
            - accountingSystem : AccountingSystem
            + getSaleLog() : SaleLog
            + getInventorySystem() : ItemRegistry
            + getDiscountRegister() : DiscountRegister
            + getAccountingSystem() : AccountingSystem
            + <<create>> RegisterCreator() : RegisterCreator

        }
        class DiscountRegister <<singleton>> {
            +getDiscountInfo(customerID : int) : DiscountDTO
        }
        class ItemRegistry <<singleton>> {
'            - flatFileDb : String
'            - inventoryTable : HashMap<Integer, ItemData>
'            - addItemData() : void
            + getItemInfo(itemID : int) : ItemDTO {exception=(ItemNotFoundInItemRegistryException, ItemRegistryException)}
            + updateInventory(closedSale : Sale) : void
        }
            note bottom : ItemData is a nested class
        class SaleLog{
            + sales : List<Sale>
            ~<<create>>SaleLog() : SaleLog
            + logSale(sale : Sale) : void
            + findSaleByTotalAmount(totalAmount : Amount) : List<Sale>
        }
        class AccountingSystem{
            + updateAccounting(closedSale : Sale) : void
            ~ <<create>> Accounting() : Accounting
        }
        class Printer{
            + <<create>>Printer() : Printer
            + printReceipt(receipt : Receipt) : void
'            + printSaleLog(saleLog : SaleLog) : void
        }
    }
    package util{
        enum Event {}
        class Logger <<interface>> {}
    }

'interfaces
Comparable <|-[dashed]- Amount
LimitedSaleView <|-[dashed]- LimitedSaleViewWrapper

Main --> View
Main -left-> Controller
Main ---> Printer
Main ---> RegisterCreator
Controller -up-> CashRegister
Controller --> SaleLog
Controller --> DiscountRegister
Controller --> AccountingSystem
Controller --> ItemRegistry
Controller --> RegisterCreator
RegisterCreator --> DiscountRegister
RegisterCreator --> AccountingSystem
RegisterCreator --> ItemRegistry
RegisterCreator --> SaleLog
View -right-> Controller
Controller --> Sale
Controller --> CashPayment
Sale --> CashPayment
Receipt <-- Sale
Sale --> Printer
Sale --> ShoppingCartItem
Sale --> Amount
@enduml

@startuml
'title DTO
' //TODO Ska vi ha en customerDTO och customerDb?
' //TODO Ska DTO:erna flyttas till CD?
hide circle
skinparam ClassAttributeIconSize 0
skinparam linetype ortho
skinparam package {
    BackgroundColor LightYellow
}
    package dto {
        class ItemDTO{
            - itemId : int
            - name : String
            - description : String
            - price : Amount
            - vat : VAT
            +<<create>> ItemDTO() : ItemDTO
            + equals(o : Object)
        }

        class CustomerDTO{
'            // TODO ska discount finnas med i SaleDTO?
            - customerID : int
            - customerType : CustomerType
            - bonusPoints : int
            +<<create>>DiscountDTO(customerID : int, customerType : CustomerType, bonusPoints : int) : DiscountDTO
            + equals(o : Object) : boolean
'        note bottom : Attributes TBD based on Discount Rules.
        }
    }
note top: getters, toString and equals are included as methods for all DTO attributes
@enduml

@startuml
skinparam style strictuml
participant ":Main" as Main
participant "printer:Printer" as printer
participant "registerCreator:RegisterCreator" as registerCreator
participant "saleLog:SaleLog" as saleLog
participant ":AccountingSystem" as AccountingSystem

participant ":ItemRegistry" as ItemRegistry
participant "contr:Controller" as contr
participant "cashRegister : CashRegister" as cashRegister
participant "view : View" as view
' user -> Main: main()
activate Main
create printer
autonumber 1
Main -[dashed]->> printer : <<create>>\n printer = Printer() : Printer

create registerCreator
autonumber 2
Main -[dashed]->> registerCreator : <<create>>\n registerCreator = RegisterCreator() : RegisterCreator
activate registerCreator

autonumber 2.1
create saleLog
registerCreator -[dashed]->> saleLog : <<create>>\n saleLog = SaleLog() : SaleLog

create AccountingSystem
autonumber 2.2
registerCreator -> AccountingSystem : <<static>>\ngetInstance() : AccountingSystem

create CustomerRegistry
autonumber 2.3
registerCreator -> CustomerRegistry : <<static>>\ngetInstance() : CustomerRegistry
'activate CustomerRegister
'deactivate CustomerRegister

create ItemRegistry
autonumber 2.4
registerCreator -> ItemRegistry: <<static>>\ngetInstance() : ItemRegistry
'activate ItemRegistry
'deactivate ItemRegistry
deactivate registerCreator

autonumber 3
create contr
Main -[dashed]->> contr : <<create>>\n contr = Controller(printer : Printer, registerCreator : RegisterCreator) : Controller
activate contr

autonumber 3.1
contr -> registerCreator : saleLog = getSaleLog() : SaleLog
activate registerCreator
deactivate registerCreator

autonumber 3.2
contr -> registerCreator : accountingSystem = getAccountingSystem() : AccountingSystem
activate registerCreator
deactivate registerCreator

autonumber 3.3
contr -> registerCreator : customerRegistry = getCustomerRegistry() : CustomerRegistry
activate registerCreator
deactivate registerCreator

autonumber 3.4
contr -> registerCreator : itemRegistry = getItemRegistry() : ItemRegistry
activate registerCreator
deactivate registerCreator

create cashRegister
autonumber 3.5
contr -[dashed]->> cashRegister : <<create>>\n cashRegister = CashRegister(initialAmount: int) : CashRegister
'activate cashRegister
'deactivate cashRegister
'TODO ska jag lägga till att contr skapar en Lista för SaleObservers?
deactivate contr

create view
autonumber 4
Main -[dashed]->> view : <<create>>\n View(contr: Controller):View
activate view

autonumber 5
view -> contr : addSaleObserver(new SaleObserver() : SaleObserver) : void
activate contr
deactivate contr
deactivate view
deactivate Main
'TODO ska jag lägga till att view skapar observers?
'TODO ska jag lägga till att view anropar contr för alla RegisterObservers?
'TODO ska jag lägga till att view anropar contr för alla SaleObservers?

@enduml

@startuml
skinparam style strictuml

'autoactivate on 'TODO activationbars!!!!!!!
' actor user
hide unlinked
'title "startSale"
participant ":View" as View
participant "contr : Controller" as contr
participant "currentSale : Sale" as currentSale
participant ": DiscountFactory" as DiscountFactory
participant "saleObservers : List<SaleObserver>" as saleObservers

autonumber 1
View -> contr : startSale(): void
activate contr

autonumber 1.1
create currentSale
contr -[dashed]->> currentSale :  <<create>>\n currentSale = Sale() : Sale
activate currentSale
autonumber 1.1.1
currentSale -> DiscountFactory : <<static>>\n discountFactory = getInstance() : DiscountFactory
activate DiscountFactory
deactivate DiscountFactory
currentSale -> DiscountFactory : pricing = getDiscountStrategy() : DiscountStrategy

'Hur lägga till brytningen som Leif har i sitt exempel?
activate DiscountFactory
autonumber stop
currentSale <<- DiscountFactory : <<exception>>\nClassNotFoundException
currentSale <<- DiscountFactory : <<exception>>\nInvocationTargetException
currentSale <<- DiscountFactory : <<exception>>\nNoSuchMethodException
currentSale <<- DiscountFactory : <<exception>>\nInstantiationException
currentSale <<- DiscountFactory : <<exception>>\nIllegalAccessException
deactivate DiscountFactory
contr <<- currentSale : <<exception>>\nOperationFailedException
deactivate currentSale
View <<- contr : <<exception>>\nOperationFailedException
autonumber 1.2
contr -> currentSale : addAllSaleObservers(saleObservers : List<SaleObserver>) : void
activate currentSale
autonumber 1.2.1
currentSale -> saleObservers : addAll(observers : List<SaleObserver>) : void
activate saleObservers
deactivate saleObservers
deactivate currentSale

deactivate contr

autonumber stop
@enduml

@startuml
skinparam style strictuml

'title registerItem
'REGISTERITEM
hide unlinked
participant ":View" as View
participant "contr:Controller" as contr
participant "currentSale:Sale" as currentSale
participant "shoppingCart:Map<Integer, ShoppingCartItem>" as shoppingCart
participant "itemRegistry:ItemRegistry" as itemRegistry
participant "item : ShoppingCartItem" as item
participant "newItem : ShoppingCartItem" as newItem

loop moreItems
'[validIdentifier]
    alt singleItem
        autonumber 1
        View -> contr : registerItem(itemID:int) : void
        activate contr
        autonumber 1.1
        contr -> contr : registerItem(itemID:int, 1 : int) : void
        activate contr
        deactivate contr
        deactivate contr

   else else
        autonumber 1
        View -> contr : registerItem(itemID:int, quantity:int) : void
        activate contr
   end
        deactivate itemRegistry
        note right: itemRegistry creates ItemDTO

        autonumber 1.2
        contr -> currentSale : addItem(itemID : int, quantity:int) : void
        activate currentSale
            autonumber 1.2.1
            currentSale -> shoppingCart : item = get.(itemID : int) : ShoppingCartItem
            activate shoppingCart
            deactivate shoppingCart
            autonumber 1.2.2
            currentSale -> item : addToQuantity(quantity : int) : void
            activate item
            deactivate item
            autonumber stop
            contr <<- currentSale : <<exception>>\nItemNotFoundInShoppingCartException
            ref over currentSale
                Notify Sale Observers
            end ref
            deactivate currentSale
'            activate currentSale
        group Item not found in Shopping Cart
            autonumber 1.2
            contr -> itemRegistry : itemInfo = getItemInfo(itemID : int) : ItemDTO
            activate itemRegistry
            autonumber stop
            contr <<- itemRegistry : <<exception>>\nItemNotFoundInItemRegistryException
            contr <<- itemRegistry : <<exception>>\nItemRegistryException
            deactivate itemRegistry
            autonumber 1.3
            contr -> currentSale : addItem(itemInfo : ItemDTO, quantity:int) : void
            activate currentSale
            autonumber 1.3.1
            create newItem
            currentSale -[dashed]->> newItem : <<create>> \n newItem = ShoppingCartItem(itemInfo : ItemDTO, quantity : int) : ShoppingCartItem
'            activate newItem
'            deactivate newItem
            autonumber 1.3.2
            currentSale -> shoppingCart : put(item.itemID():int, newItem : ShoppingCartItem) : ShoppingCartItem
            activate shoppingCart
            deactivate shoppingCart
        deactivate currentSale
            ref over currentSale
                Notify Sale Observers
            end ref
        end
        autonumber stop
            View <<- contr : <<exception>>\nItemNotFoundInInRegistryException
            View <<- contr : <<exception>>\nOperationFailedException
        deactivate contr

        deactivate contr
end

autonumber stop
@enduml
@startuml

skinparam style strictuml
mainframe **sd** Notify Sale Observers
participant ": Sale" as Sale
participant "<<interface>>\n: LimitedSaleView" as LimitedSaleView
participant "saleObservers : List<SaleObserver>" as saleObservers

-> Sale : [some sale update]
activate Sale
Sale -> Sale : notifyObservers() : void
activate Sale
create LimitedSaleView
Sale -[dashed]->> LimitedSaleView : <<create>>\n limitedSaleView = LimitedSaleViewWrapper(sale : Sale) : LimitedSaleViewWrapper
loop for each SaleObserver in saleObservers
    Sale -> saleObservers : updateSale(limitedSaleView : LimitedSaleView) : void
    activate saleObservers
    deactivate saleObservers
end loop

@enduml
@startuml

skinparam style strictuml
mainframe **sd** Notify Cash Register Observers
participant ": CashRegister" as CashRegister
participant "cashRegisterObservers\n: List<CashRegisterObserver>" as cashRegisterObservers

-> CashRegister : addPayment()
activate CashRegister
CashRegister -> CashRegister : notifyObservers() : void
activate CashRegister
loop for each CashRegisterObserver in cashRegisterObservers
    CashRegister -> cashRegisterObservers : updateRevenue(revenue : Amount) : void
    activate cashRegisterObservers
    deactivate cashRegisterObservers
end loop

@enduml
@startuml
skinparam style strictuml
'title EndSale

participant ":View" as View
participant "contr:Controller" as contr
participant "currentSale:Sale" as currentSale

autonumber 1
View -> contr : endSale() : void
activate View
activate contr
autonumber 1.1
contr -> currentSale : endSale (): void
activate currentSale
            ref over currentSale
                Notify Sale Observers
            end ref
deactivate currentSale
deactivate contr
deactivate View

autonumber stop
@enduml

@startuml
skinparam style strictuml
'title registerCustomerToSale

participant ": View" as View
participant "contr : Controller" as contr
participant ": CustomerRegistry" as CustomerRegistry
participant "currentSale : Sale" as currentSale
participant ": Customer" as customer

autonumber 1
View -> contr : registerCustomerToSale(customerID:int): void
activate View
activate contr
autonumber 1.1
'create CustomerRegistry
contr -> CustomerRegistry : customerInfo = \ngetCustomerInfo(customerID:int) : CustomerDTO
activate CustomerRegistry
autonumber stop
contr <<- CustomerRegistry : <<exception>>\nCustomerNotFoundInCustomerRegistryException
contr <<- CustomerRegistry : <<exception>>\nCustomerRegistryException
deactivate CustomerRegistry
View <<- contr : <<exception>>\nCustomerNotFoundInCustomerRegistryException
View <<- contr : <<exception>>\nOperationFailedException
autonumber 1.2
contr -> currentSale : addCustomerToSale(customerInfo:CustomerDTO): void
activate currentSale
create customer
autonumber 1.2.1
currentSale -[dashed]-> customer : <<create>>\nCustomer(customerInfo : CustomerDTO) \n: Customer
activate customer
deactivate customer
deactivate customer

deactivate contr
deactivate View

autonumber stop
@enduml

@startuml
skinparam style strictuml
'title addPayment

'TODO: HÄR ÄR DU.
participant ": View" as View
participant "contr : Controller" as contr
participant "payment : CashPayment" as payment
participant "currentSale : Sale" as currentSale
participant "cashRegister : CashRegister" as cashRegister
participant "currentReceipt : Receipt" as currentReceipt
participant "printer : Printer" as printer

activate View
autonumber 1
View -> contr : pay(paidAmt : Amount) : void
activate contr
create payment
autonumber 1.1
contr -[dashed]->> payment : <<create>> \npayment = \nCashPayment(paidAmt:Amount) : CashPayment
autonumber 1.2
contr -> currentSale : pay(payment:CashPayment) : void
activate currentSale
ref over currentSale, payment
Pricing; discount and customer bonus points strategy
'TODO ref:
end
deactivate currentSale

deactivate currentSale
deactivate payment
deactivate currentSale
autonumber 1.3
contr -> cashRegister : addPayment (payment:CashPayment) : void
activate cashRegister
autonumber 1.3.1
cashRegister -> payment : getPaidAmt() : Amount
activate payment
deactivate payment
cashRegister -> payment : getChange() : Amount
activate payment
deactivate payment
cashRegister -> payment : getTotalCostPaid() : Amount
activate payment
deactivate payment
ref over cashRegister
Notify Cash Register Observers
end ref
deactivate cashRegister

ref over contr, currentSale
Log sale and update external systems
'TODO ref:
'participant "contr : Controller" as contr
'participant "currentSale : Sale" as currentSale
'participant "saleLog:SaleLog" as saleLog
'participant ": AccountingSystem" as AccountingSystem
'participant "customerRegistry : CustomerRegistry" as customerRegistry
'participant "itemRegistry : ItemRegistry" as itemRegistry
'autonumber 1.4
'contr -> saleLog:logSale(currentSale : Sale):void
'activate saleLog
'deactivate saleLog
'
'autonumber 1.5
'contr -> AccountingSystem : updateToAccounting(currentSale : Sale): void
'activate AccountingSystem
'autonumber 1.5.1
'AccountingSystem -> AccountingSystem : updateDatabase() :void
'activate AccountingSystem
'deactivate AccountingSystem
'deactivate AccountingSystem
'
'autonumber 1.6
'contr -> customerRegistry : updateToAccounting(currentSale : Sale): void
'activate customerRegistry
'autonumber 1.6.1
'customerRegistry -> customerRegistry : updateDatabase() :void
'activate customerRegistry
'deactivate customerRegistry
'deactivate customerRegistry
'
'autonumber 1.7
'contr -> itemRegistry : updateInventory(currentSale : Sale)
'activate itemRegistry
'autonumber 1.7.1
'itemRegistry -> itemRegistry : updateDatabase() :void
'activate itemRegistry
'deactivate itemRegistry
'deactivate itemRegistry
'deactivate currentSale
end ref
autonumber 1.4
contr -> currentSale : printReceipt(printer:Printer) : void
activate currentSale
create currentReceipt
autonumber 1.4.1
currentSale -[dashed]->> currentReceipt : <<create>>\n receipt = \n Receipt(sale:Sale) : Receipt
'activate currentReceipt
'deactivate currentReceipt
autonumber 1.4.2
currentSale -> printer :printReceipt(receipt:Receipt):void
activate printer
deactivate printer
deactivate currentSale
deactivate contr
deactivate View
autonumber stop

@enduml
@startuml
mainframe **sd** Pricing; discount and customer bonus points strategy
participant "currentSale : Sale" as currentSale
participant "payment : CashPayment" as payment
participant "pricing : CompositeDiscountStrategy" as pricing
participant "discountStrategies :\n List<DiscountStrategy>" as discountStrategies
participant "strategy : DiscountStrategy" as strategy
participant "customer : Customer" as customer

skinparam style strictuml

-> currentSale : pay(payment : CashPayment) : void
activate currentSale
currentSale -> payment : calculateTotalCost(currentSale : Sale) : void
activate payment
payment -> currentSale : totalCostPaid =\n getTotalPrice() : Amount
activate currentSale
currentSale -> pricing : getTotal(currentSale : Sale) : Amount
activate pricing
pricing -> currentSale : lowestTotalPrice =\n calculateRunningTotal() : Amount
activate currentSale
deactivate currentSale
loop i.hasNext
    pricing -> discountStrategies : strategy = i.next() : DiscountStrategy
    activate discountStrategies
    deactivate discountStrategies
    pricing -> strategy : total =\ngetTotal(currentSale)
    activate strategy
    deactivate strategy
    opt lowestTotalPrice > total
        pricing -> pricing : lowestTotalPrice = total
        pricing -> pricing : usedDiscountStrategy = strategy
    end opt
    deactivate pricing
end loop

payment -> currentSale : customer =\n getCustomer() : Customer
opt customer != null
payment ->  customer : addBonusPoints(totalCostPaid : Amount)
end opt
deactivate currentSale
@enduml
